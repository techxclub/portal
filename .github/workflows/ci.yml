name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - 'feature/*'
  workflow_dispatch:

jobs:
  # Static Checks
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.3'

      - name: Run Tests
        run: LOG_LEVEL=error make ci-test

  lint:
    runs-on: ubuntu-latest
    name: Run Lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.3'

      - name: Run Lint
        run: make ci-lint

  # Build Stage
  build:
    runs-on: ubuntu-latest
    needs: [ test, lint ]
    if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/feature/') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.3'

      - name: Build Go binary
        run: make build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            ./out/
            ./swagger/
            ./i18n/
          retention-days: 7

  # Deploy Integration Stage
  deploy_integration:
    runs-on: ubuntu-latest
    needs: [ build ]
    if: ${{ github.event_name == 'workflow_dispatch' || (github.ref == 'refs/heads/main' && startsWith(github.ref, 'refs/heads/feature/')) }}
    env:
      SSH_PRIVATE_KEY: ${{ secrets.INTEGRATION_EC2_SSH_PRIVATE_KEY }}
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Load application.yml from secrets
        run: echo "$APPLICATION_YML_CONTENTS" > application.yml
        env:
          APPLICATION_YML_CONTENTS: ${{ secrets.INTEGRATION_APPLICATION_YML_CONTENTS }}

      - name: Deploy to Integration EC2
        run: |
          echo "${SSH_PRIVATE_KEY}" > ssh_key
          chmod 600 ssh_key

          ssh -i ssh_key -o StrictHostKeyChecking=no ${{ secrets.INTEGRATION_EC2_USERNAME }}@${{ secrets.INTEGRATION_EC2_HOST }} "mkdir -p /home/ubuntu/techx/portal"

          # Copy the portal code to the EC2 instance
          rsync -avz -e "ssh -i ssh_key -o StrictHostKeyChecking=no" ./ ${{ secrets.INTEGRATION_EC2_USERNAME }}@${{ secrets.INTEGRATION_EC2_HOST }}:/home/ubuntu/techx/portal/

          ssh -i ssh_key -o StrictHostKeyChecking=no ${{ secrets.INTEGRATION_EC2_USERNAME }}@${{ secrets.INTEGRATION_EC2_HOST }} << 'EOF'
            sudo systemctl stop portal.service
          EOF

          ssh -i ssh_key -o StrictHostKeyChecking=no ${{ secrets.INTEGRATION_EC2_USERNAME }}@${{ secrets.INTEGRATION_EC2_HOST }} << 'EOF'
            sudo bash -c 'cat >/etc/systemd/system/portal.service <<EOL
            [Unit]
            Description=Portal API Server
            After=network.target

            [Service]
            Type=simple
            WorkingDirectory=/home/ubuntu/techx/portal
            ExecStart=/home/ubuntu/techx/portal/out/portal start --config-file /home/ubuntu/techx/portal/application.yml
            Restart=always
            User=ubuntu

            [Install]
            WantedBy=multi-user.target
            EOL'

            sudo systemctl daemon-reload
            sudo systemctl enable portal.service
            sudo systemctl start portal.service
            sudo systemctl status portal.service
          EOF
