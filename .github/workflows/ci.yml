name: CI/CD Pipeline

on:
  push:
    branches:
      - "**"
  workflow_dispatch:

jobs:
  # Static Checks
  test-and-lint:
    runs-on: ubuntu-latest
    name: Test and Lint
    services:
      redis:
        image: redis
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.3'

      - name: Run Tests
        run: LOG_LEVEL=error make ci-test
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Run Lint
        run: make ci-lint

  # Build Stage
  build:
    runs-on: ubuntu-latest
    name: Build
    if: ${{ github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/feature/') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.3'

      - name: Build Go binary
        run: make build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            ./out/
            ./swagger/
            ./resources/
            ./migrations/
          retention-days: 7

  # Deploy Integration Stage
  #  deploy_integration:
  #    runs-on: ubuntu-latest
  #    name: Deploy Integration
  #    needs: [ test-and-lint, build ]
  #    if: ${{ github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/feature/') }}
  #    env:
  #      SSH_PRIVATE_KEY: ${{ secrets.INTEGRATION_SSH_PRIVATE_KEY }}
  #    steps:
  #      - name: Download build artifacts
  #        uses: actions/download-artifact@v4
  #        with:
  #          name: build-artifacts
  #          path: .
  #
  #      - name: Load application.yml from secrets
  #        run: echo "$APPLICATION_YML_CONTENTS" > application.yml
  #        env:
  #          APPLICATION_YML_CONTENTS: ${{ secrets.INTEGRATION_APPLICATION_YML_CONTENTS }}
  #
  #      - name: Deploy to Integration AWS
  #        run: |
  #          echo "${AWS_SSH_PRIVATE_KEY}" > ssh_key
  #          chmod 600 ssh_key
  #
  #          ssh -i ssh_key -o StrictHostKeyChecking=no ${{ secrets.INTEGRATION_USERNAME }}@${{ secrets.INTEGRATION_HOST }} "mkdir -p /home/${{ secrets.INTEGRATION_USERNAME }}/app/portal"
  #
  #          # Copy the portal code to the EC2 instance
  #          rsync -avz -e "ssh -i ssh_key -o StrictHostKeyChecking=no" ./ ${{ secrets.INTEGRATION_USERNAME }}@${{ secrets.INTEGRATION_HOST }}:/home/${{ secrets.INTEGRATION_USERNAME }}/app/portal/
  #
  #          ssh -i ssh_key -o StrictHostKeyChecking=no ${{ secrets.INTEGRATION_USERNAME }}@${{ secrets.INTEGRATION_HOST }} << 'EOF'
  #          if systemctl is-active --quiet portal.service; then
  #            echo "Stopping the running portal service..."
  #            sudo systemctl stop portal.service
  #            echo "Service stopped."
  #          else
  #            echo "Portal service is not running."
  #          fi
  #
  #          sudo bash -c 'cat >/etc/systemd/system/portal.service <<EOL
  #          [Unit]
  #          Description=Portal API Server
  #          After=network.target
  #
  #          [Service]
  #          Type=simple
  #          WorkingDirectory=/home/${{ secrets.INTEGRATION_USERNAME }}/app/portal
  #          ExecStartPre=/home/${{ secrets.INTEGRATION_USERNAME }}/app/portal/out/portal migrate:run --config-file /home/${{ secrets.INTEGRATION_USERNAME }}/app/portal/application.yml
  #          ExecStart=/home/${{ secrets.INTEGRATION_USERNAME }}/app/portal/out/portal start --config-file /home/${{ secrets.INTEGRATION_USERNAME }}/app/portal/application.yml
  #          Restart=always
  #          User=${{ secrets.INTEGRATION_USERNAME }}
  #
  #          [Install]
  #          WantedBy=multi-user.target
  #          EOL'
  #
  #          chmod +x /home/${{ secrets.INTEGRATION_USERNAME }}/app/portal/out/portal
  #          sudo systemctl daemon-reload
  #          sudo systemctl enable portal.service
  #          sudo systemctl restart portal.service
  #          sudo systemctl status portal.service
  #


  # Deploy Production Stage
  deploy_production:
    runs-on: ubuntu-latest
    name: Deploy Production
    needs: [ test-and-lint, build ]
    if: ${{ github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/feature/') }}
    env:
      AZURE_SSH_PRIVATE_KEY: ${{ secrets.PRODUCTION_SSH_PRIVATE_KEY }}
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Load application.yml from secrets
        run: echo "$APPLICATION_YML_CONTENTS" > application.yml
        env:
          APPLICATION_YML_CONTENTS: ${{ secrets.PRODUCTION_APPLICATION_YML_CONTENTS }}

      - name: Deploy to Azure Production
        run: |
          echo "${AZURE_SSH_PRIVATE_KEY}" > ssh_key
          chmod 600 ssh_key

          ssh -i ssh_key -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USERNAME }}@${{ secrets.PRODUCTION_HOST }} "mkdir -p /home/${{ secrets.PRODUCTION_USERNAME }}/app/portal"

          # Copy the portal code to the Azure VM instance
          rsync -avz --exclude 'ssh_key' -e "ssh -i ssh_key -o StrictHostKeyChecking=no" ./ ${{ secrets.PRODUCTION_USERNAME }}@${{ secrets.PRODUCTION_HOST }}:/home/${{ secrets.PRODUCTION_USERNAME }}/app/portal/

          ssh -i ssh_key -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USERNAME }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
          if systemctl is-active --quiet portal.service; then
            echo "Stopping the running portal service..."
            sudo systemctl stop portal.service
            echo "Service stopped."
          else
            echo "Portal service is not running."
          fi

          sudo bash -c 'cat >/etc/systemd/system/portal.service <<EOL
          [Unit]
          Description=Portal API Server
          After=network.target

          [Service]
          Type=simple
          WorkingDirectory=/home/${{ secrets.PRODUCTION_USERNAME }}/app/portal
          ExecStartPre=/home/${{ secrets.PRODUCTION_USERNAME }}/app/portal/out/portal migrate:run --config-file /home/${{ secrets.PRODUCTION_USERNAME }}/app/portal/application.yml
          ExecStart=/home/${{ secrets.PRODUCTION_USERNAME }}/app/portal/out/portal start --config-file /home/${{ secrets.PRODUCTION_USERNAME }}/app/portal/application.yml
          Restart=always
          User=${{ secrets.PRODUCTION_USERNAME }}

          [Install]
          WantedBy=multi-user.target
          EOL'
          
          chmod +x /home/${{ secrets.PRODUCTION_USERNAME }}/app/portal/out/portal
          sudo systemctl daemon-reload
          sudo systemctl enable portal.service
          sudo systemctl restart portal.service
          sudo systemctl status portal.service
          EOF
